import { T as Thing, S as SchemaOrgNodeDefinition, M as MetaInput, R as ResolvedMeta, a as SchemaOrgGraph, A as Arrayable, b as SchemaOrgNode } from './shared/schema-org.D5CDiwX5.js';
export { e as AggregateOffer, d as AggregateOfferSimple, h as AggregateRating, g as AggregateRatingSimple, k as Article, j as ArticleSimple, m as Book, o as BookEdition, n as BookEditionSimple, B as BookSimple, t as BreadcrumbList, s as BreadcrumbSimple, w as Comment, C as CommentSimple, z as Course, y as CourseSimple, F as Event, E as EventSimple, Q as FoodEstablishment, O as FoodEstablishmentSimple, X as HowTo, a1 as HowToDirection, Y as HowToId, W as HowToSimple, $ as HowToStep, _ as HowToStepSimple, bk as Id, bj as IdReference, be as Identity, a4 as ImageObject, a3 as ImageSimple, a7 as ItemList, a6 as ItemListSimple, aa as JobPosting, a9 as JobPostingSimple, ad as ListItem, ac as ListItemSimple, ag as LocalBusiness, af as LocalBusinessSimple, aj as Movie, ai as MovieSimple, bc as NodeRelation, bd as NodeRelations, aO as NutritionInformation, am as Offer, al as OfferSimple, ao as OpeningHoursSimple, ap as OpeningHoursSpecification, bg as OptionalSchemaOrgPrefix, as as Organization, ar as OrganizationSimple, av as Person, au as PersonSimple, J as Place, I as PlaceSimple, aA as PostalAddress, az as PostalAddressName, ax as PostalAddressSimple, ay as PostalAddressStrict, P as PrimaryArticleId, q as PrimaryBookId, u as PrimaryBreadcrumbId, G as PrimaryEventId, b0 as PrimaryWebPageId, b7 as PrimaryWebSiteId, aD as Product, aE as ProductId, aC as ProductSimple, aH as Question, aG as QuestionSimple, aK as Rating, aJ as RatingSimple, b3 as ReadAction, b2 as ReadActionInput, aN as Recipe, aP as RecipeId, aM as RecipeSimple, bf as ResolvableDate, aS as Review, aR as ReviewSimple, ba as SearchAction, b9 as SearchActionInput, aV as SoftwareApp, aU as SoftwareAppSimple, bh as UserConfig, aY as VideoObject, aX as VideoSimple, L as VirtualLocation, V as VirtualLocationSimple, a$ as WebPage, a_ as WebPageSimple, b6 as WebSite, b5 as WebSiteSimple, bi as WithResolver, aB as addressResolver, f as aggregateOfferResolver, i as aggregateRatingResolver, l as articleResolver, p as bookEditionResolver, r as bookResolver, v as breadcrumbResolver, x as commentResolver, D as courseResolver, c as createSchemaOrgGraph, H as eventResolver, U as foodEstablishmentResolver, Z as howToResolver, a2 as howToStepDirectionResolver, a0 as howToStepResolver, a5 as imageResolver, a8 as itemListResolver, ab as jobPostingResolver, ae as listItemResolver, ah as localBusinessResolver, ak as movieResolver, an as offerResolver, aq as openingHoursResolver, at as organizationResolver, aw as personResolver, K as placeResolver, aF as productResolver, aI as questionResolver, aL as ratingResolver, b4 as readActionResolver, aQ as recipeResolver, aT as reviewResolver, bb as searchActionResolver, aW as softwareAppResolver, aZ as videoResolver, N as virtualLocationResolver, b1 as webPageResolver, b8 as webSiteResolver } from './shared/schema-org.D5CDiwX5.js';
export { a as PluginSchemaOrg, P as PluginSchemaOrgOptions, S as SchemaOrgUnheadPlugin, U as UnheadSchemaOrg } from './shared/schema-org.B3f2mYF6.js';
export { U as UseSchemaOrgInput, d as defineAddress, a as defineAggregateOffer, b as defineAggregateRating, c as defineArticle, A as defineBook, I as defineBookEdition, e as defineBreadcrumb, f as defineComment, B as defineCourse, g as defineEvent, h as defineFoodEstablishment, k as defineHowTo, l as defineHowToStep, m as defineImage, C as defineItemList, n as defineJobPosting, D as defineListItem, o as defineLocalBusiness, E as defineMovie, p as defineOffer, q as defineOpeningHours, r as defineOrganization, s as definePerson, j as definePlace, t as defineProduct, u as defineQuestion, G as defineReadAction, v as defineRecipe, w as defineReview, F as defineSearchAction, H as defineSoftwareApp, x as defineVideo, i as defineVirtualLocation, y as defineWebPage, z as defineWebSite, J as normalizeSchemaOrgInput, K as useSchemaOrg } from './shared/schema-org.B8mOT8YC.js';
import 'unhead/types';

declare function defineSchemaOrgResolver<T extends Thing>(schema: SchemaOrgNodeDefinition<T>): SchemaOrgNodeDefinition<T>;

interface ResolverOptions {
    /**
     * Return single images as an object.
     */
    array?: boolean;
    /**
     * Move added nodes to the root graph.
     */
    root?: boolean;
    /**
     * Generates ids for nodes.
     */
    generateId?: boolean;
    afterResolve?: (node: any) => void;
}

declare function resolveMeta(meta: Partial<MetaInput>): ResolvedMeta;
declare function resolveNode<T extends Thing>(node: T, ctx: SchemaOrgGraph, resolver?: SchemaOrgNodeDefinition<T>): T;
declare function resolveNodeId<T extends Thing>(node: T, ctx: SchemaOrgGraph, resolver?: SchemaOrgNodeDefinition<T>, resolveAsRoot?: boolean): T;
declare function resolveRelation(input: Arrayable<any>, ctx: SchemaOrgGraph, fallbackResolver?: SchemaOrgNodeDefinition<any>, options?: ResolverOptions): any;

/**
 * Dedupe, flatten and a collection of nodes. Will also sort node keys and remove meta keys.
 * @param nodes
 */
declare function dedupeNodes(nodes: SchemaOrgNode[]): SchemaOrgNode[];
declare function normaliseNodes(nodes: SchemaOrgNode[]): SchemaOrgNode[];

export { Arrayable, MetaInput, ResolvedMeta, SchemaOrgGraph, SchemaOrgNode, SchemaOrgNodeDefinition, Thing, dedupeNodes, defineSchemaOrgResolver, normaliseNodes, resolveMeta, resolveNode, resolveNodeId, resolveRelation };
