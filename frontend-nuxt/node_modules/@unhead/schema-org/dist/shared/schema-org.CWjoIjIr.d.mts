import { aA as PostalAddress, ay as PostalAddressStrict, az as PostalAddressName, e as AggregateOffer, h as AggregateRating, k as Article, t as BreadcrumbList, w as Comment, F as Event, Q as FoodEstablishment, L as VirtualLocation, J as Place, X as HowTo, $ as HowToStep, a4 as ImageObject, aa as JobPosting, ag as LocalBusiness, am as Offer, ap as OpeningHoursSpecification, as as Organization, av as Person, aD as Product, aH as Question, aN as Recipe, aS as Review, aY as VideoObject, a$ as WebPage, b6 as WebSite, m as Book, z as Course, a7 as ItemList, ad as ListItem, aj as Movie, ba as SearchAction, b3 as ReadAction, aV as SoftwareApp, o as BookEdition, A as Arrayable, T as Thing } from './schema-org.D5CDiwX5.mjs';
import { Unhead, HeadEntryOptions, ActiveHeadEntry } from 'unhead/types';

declare function defineAddress<T extends Record<string, any>>(input?: PostalAddress & T): (PostalAddressStrict & T) | (PostalAddressName & T);
declare function defineAggregateOffer<T extends Record<string, any>>(input?: AggregateOffer & T): AggregateOffer & T;
declare function defineAggregateRating<T extends Record<string, any>>(input?: AggregateRating & T): AggregateRating & T;
declare function defineArticle<T extends Record<string, any>>(input?: Article & T): Article & T;
declare function defineBreadcrumb<T extends Record<string, any>>(input?: BreadcrumbList & T): BreadcrumbList & T;
declare function defineComment<T extends Record<string, any>>(input?: Comment & T): Comment & T;
declare function defineEvent<T extends Record<string, any>>(input?: Event & T): Event & T;
declare function defineFoodEstablishment<T extends Record<string, any>>(input?: FoodEstablishment & T): FoodEstablishment & T;
declare function defineVirtualLocation<T extends Record<string, any>>(input?: VirtualLocation & T): VirtualLocation & T;
declare function definePlace<T extends Record<string, any>>(input?: Place & T): Place & T;
declare function defineHowTo<T extends Record<string, any>>(input?: HowTo & T): HowTo & T;
declare function defineHowToStep<T extends Record<string, any>>(input?: HowToStep & T): HowToStep & T;
declare function defineImage<T extends Record<string, any>>(input?: ImageObject & T): ImageObject & T;
declare function defineJobPosting<T extends Record<string, any>>(input?: JobPosting & T): JobPosting & T;
declare function defineLocalBusiness<T extends Record<string, any>>(input?: LocalBusiness & T): LocalBusiness & T;
declare function defineOffer<T extends Record<string, any>>(input?: Offer & T): Offer & T;
declare function defineOpeningHours<T extends Record<string, any>>(input?: OpeningHoursSpecification & T): OpeningHoursSpecification & T;
declare function defineOrganization<T extends Record<string, any>>(input?: Organization & T): Organization & T;
declare function definePerson<T extends Record<string, any>>(input?: Person & T): Person & T;
declare function defineProduct<T extends Record<string, any>>(input?: Product & T): Product & T;
declare function defineQuestion<T extends Record<string, any>>(input?: Question & T): Question & T;
declare function defineRecipe<T extends Record<string, any>>(input?: Recipe & T): Recipe & T;
declare function defineReview<T extends Record<string, any>>(input?: Review & T): Review & T;
declare function defineVideo<T extends Record<string, any>>(input?: VideoObject & T): VideoObject & T;
declare function defineWebPage<T extends Record<string, any>>(input?: WebPage & T): WebPage & T;
declare function defineWebSite<T extends Record<string, any>>(input?: WebSite & T): WebSite & T;
declare function defineBook<T extends Record<string, any>>(input?: Book & T): Book & T;
declare function defineCourse<T extends Record<string, any>>(input?: Course & T): Course & T;
declare function defineItemList<T extends Record<string, any>>(input?: ItemList & T): ItemList & T;
declare function defineListItem<T extends Record<string, any>>(input?: ListItem & T): ListItem & T;
declare function defineMovie<T extends Record<string, any>>(input?: Movie & T): Movie & T;
declare function defineSearchAction<T extends Record<string, any>>(input?: SearchAction & T): SearchAction & T;
declare function defineReadAction<T extends Record<string, any>>(input?: ReadAction & T): ReadAction & T;
declare function defineSoftwareApp<T extends Record<string, any>>(input?: SoftwareApp & T): SoftwareApp & T;
declare function defineBookEdition<T extends Record<string, any>>(input?: BookEdition & T): BookEdition & T;
type UseSchemaOrgInput = Arrayable<Thing | Record<string, any>>;
declare function normalizeSchemaOrgInput<T extends UseSchemaOrgInput>(input: T): T;
declare function useSchemaOrg(unhead: Unhead<any>, input?: UseSchemaOrgInput, options?: HeadEntryOptions): ActiveHeadEntry<UseSchemaOrgInput>;

export { defineBook as A, defineCourse as B, defineItemList as C, defineListItem as D, defineMovie as E, defineSearchAction as F, defineReadAction as G, defineSoftwareApp as H, defineBookEdition as I, normalizeSchemaOrgInput as J, useSchemaOrg as K, defineAggregateOffer as a, defineAggregateRating as b, defineArticle as c, defineAddress as d, defineBreadcrumb as e, defineComment as f, defineEvent as g, defineFoodEstablishment as h, defineVirtualLocation as i, definePlace as j, defineHowTo as k, defineHowToStep as l, defineImage as m, defineJobPosting as n, defineLocalBusiness as o, defineOffer as p, defineOpeningHours as q, defineOrganization as r, definePerson as s, defineProduct as t, defineQuestion as u, defineRecipe as v, defineReview as w, defineVideo as x, defineWebPage as y, defineWebSite as z };
export type { UseSchemaOrgInput as U };
