import * as _nuxt_schema from '@nuxt/schema';
import { MetaFlatSerializable } from '../dist/runtime/types.js';

interface ModuleOptions {
    /**
     * Whether the SEO experiements should run.
     *
     * @default true
     */
    enabled: boolean;
    /**
     * Should the files in the public directory be used to infer tags such as favicon, apple-touch-icon, and
     * open graph images.
     *
     * @default true
     */
    metaDataFiles: boolean;
    /**
     * Should head data be inferred from the current input to fill in the gaps.
     *
     * For example:
     * - If you supply a title, this will automatically add an og:title.
     * - If you provide an og:image, it will automatically add a twitter:image.
     *
     * @default true
     */
    automaticOgAndTwitterTags: boolean;
    /**
     * Attempts to treeshake the `useSeoMeta` function. Can save around 5kb in the client bundle.
     *
     * @default true
     */
    treeShakeUseSeoMeta: boolean;
    /**
     * Injects site config into the `useHead` composable such as setting the title template
     *
     * @default true
     */
    mergeWithSiteConfig: boolean;
    /**
     * Adds `head` and `seoMeta` to the route rules and app config.
     *
     * @default true
     */
    extendRouteRules: boolean;
    /**
     * Tries to convert relative image paths to absolute paths in meta tags.
     *
     * @default true
     */
    fixRequiredAbsoluteMetaTagsLinks: boolean;
    /**
     * Extends the `head` in the Nuxt config with the `seoMeta` object.
     *
     * @default true
     */
    extendNuxtConfigAppHeadSeoMeta: boolean;
    /**
     * Augments the head schema with `/public` files making it easier to reference them in the head.
     *
     * @default true
     */
    extendNuxtConfigAppHeadTypes: boolean;
    /**
     * @dead
     */
    setupNuxtConfigAppHeadWithMoreDefaults: boolean;
    /**
     * Will ensure a title is always set by providing a fallback title based on the casing the last slug segment.
     *
     * @default true
     */
    fallbackTitle?: boolean;
    /**
     * Will set up a number of defaults for meta tags and Schema.org, if the modules and config are available.
     *
     * @default true
     */
    automaticDefaults?: boolean;
    /**
     * When enabled, it will whitelist the query parameters that are allowed in the canonical URL.
     */
    canonicalQueryWhitelist?: string[];
    /**
     * When enabled, it will lowercase the canonical URL.
     *
     * @default true
     */
    canonicalLowercase?: boolean;
    /**
     * When enabled, it will redirect any request to the canonical domain (site url) using a 301 redirect on non-dev environments.
     *
     * E.g if the site url is 'www.example.com' and the user visits 'example.com',
     * they will be redirected to 'www.example.com'.
     *
     * This is useful for SEO as it prevents duplicate content and consolidates page rank.
     *
     * @default false
     */
    redirectToCanonicalSiteUrl?: boolean;
    /**
     * The SEO meta object to be used as defaults.
     */
    meta: MetaFlatSerializable;
    /**
     * Enables debug logs and a debug endpoint.
     *
     * @default false
     */
    debug: boolean;
}
declare const _default: _nuxt_schema.NuxtModule<ModuleOptions, ModuleOptions, false>;

export { _default as default };
export type { ModuleOptions };
