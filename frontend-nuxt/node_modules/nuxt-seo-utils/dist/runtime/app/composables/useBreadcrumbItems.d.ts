import type { NuxtLinkProps } from 'nuxt/app';
import type { MaybeRefOrGetter } from 'vue';
interface NuxtUIBreadcrumbItem extends NuxtLinkProps {
    label: string;
    labelClass?: string;
    icon?: string;
    iconClass?: string;
    as?: string;
    type?: 'button' | 'submit' | 'reset';
    disabled?: boolean;
    active?: boolean;
    exact?: boolean;
    exactQuery?: boolean;
    exactMatch?: boolean;
    inactiveClass?: string;
    [key: string]: any;
}
export interface BreadcrumbProps {
    /**
     * Generate the breadcrumbs based on a different path than the current route.
     */
    path?: MaybeRefOrGetter<string>;
    /**
     * The id of the breadcrumb list. It's recommended to provide a unique
     * id when adding multiple breadcrumb lists to the same page.
     */
    id?: string;
    /**
     * Append additional breadcrumb items to the end of the list. This is applied
     * after the `overrides` option.
     */
    append?: MaybeRefOrGetter<BreadcrumbItemProps[]>;
    /**
     * Prepend additional breadcrumb items to the start of the list. This is applied
     * after the `overrides` option.
     */
    prepend?: MaybeRefOrGetter<BreadcrumbItemProps[]>;
    /**
     * Override any of the breadcrumb items based on the index.
     */
    overrides?: MaybeRefOrGetter<(BreadcrumbItemProps | false | undefined)[]>;
    /**
     * Should the schema.org breadcrumb be generated.
     * @default true
     */
    schemaOrg?: boolean;
    /**
     * The Aria Label for the breadcrumbs.
     * You shouldn't need to change this.
     *
     * @default 'Breadcrumbs'
     */
    ariaLabel?: string;
    /**
     * Should the current breadcrumb item be shown.
     *
     * @default false
     */
    hideCurrent?: MaybeRefOrGetter<boolean>;
    /**
     * Should the root breadcrumb be shown.
     */
    hideRoot?: MaybeRefOrGetter<boolean>;
    /**
     * Should breadcrumb items with non-existing path be shown.
     *
     * By default, every path segments will be present in breadcrumb list even if there is no corresponding page for such segment.
     *
     * @default false
     */
    hideNonExisting?: MaybeRefOrGetter<boolean>;
    /**
     * The root segment of the breadcrumb list.
     *
     * By default, this will be `/`, unless you're using Nuxt I18n with a prefix strategy.
     */
    rootSegment?: string;
}
export type ResolvedBreadcrumbProps = {
    [key in keyof BreadcrumbProps]: BreadcrumbProps[key] extends MaybeRefOrGetter<infer T> ? T : BreadcrumbProps[key];
};
export interface BreadcrumbItemProps extends NuxtUIBreadcrumbItem {
    /** Whether the breadcrumb item represents the aria-current. */
    current?: boolean;
    /**
     * The type of current location the breadcrumb item represents, if `isCurrent` is true.
     * @default 'page'
     */
    ariaCurrent?: 'page' | 'step' | 'location' | 'date' | 'time' | boolean | 'true' | 'false';
    to?: string;
    ariaLabel?: string;
    separator?: boolean | string;
    class?: (string | string[] | undefined)[] | string;
    /**
     * @internal
     */
    _props?: {
        first: boolean;
        last: boolean;
    };
}
/**
 * Generate an automatic breadcrumb list that helps users to navigate between pages.
 *
 * - Integrates with [Nuxt Schema.org](/schema-org/getting-started/installation) to generate [BreadcrumbList](https://schema.org/BreadcrumbList) structured data.
 * - Integrates with [Nuxt I18n](https://i18n.nuxtjs.org/) to generate localized breadcrumbs.
 *
 * @see https://github.com/harlan-zw/nuxt-seo/blob/main/src/runtime/nuxt/composables/useBreadcrumbItems.ts
 * @docs https://nuxtseo.com/nuxt-seo/api/breadcrumbs
 */
export declare function useBreadcrumbItems(_options?: BreadcrumbProps): import("vue").ComputedRef<BreadcrumbItemProps[]>;
export {};
