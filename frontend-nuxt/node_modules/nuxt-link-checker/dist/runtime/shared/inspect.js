import { hasProtocol, parseURL } from "ufo";
import RuleAbsoluteSiteUrls from "./inspections/absolute-site-urls.js";
import RuleDescriptiveLinkText from "./inspections/link-text.js";
import RuleMissingHash from "./inspections/missing-hash.js";
import RuleNoDocumentRelative from "./inspections/no-baseless.js";
import RuleNoDoubleSlashes from "./inspections/no-double-slashes.js";
import RuleNoDuplicateQueryParams from "./inspections/no-duplicate-query-params.js";
import RuleNoErrorResponse from "./inspections/no-error-response.js";
import RuleNoJavascript from "./inspections/no-javascript.js";
import RuleNoMissingHref from "./inspections/no-missing-href.js";
import RuleNoNonAsciiChars from "./inspections/no-non-ascii-chars.js";
import RuleNoUnderscores from "./inspections/no-underscores.js";
import RuleNoUppercaseChars from "./inspections/no-uppercase-chars.js";
import RuleNoWhitespace from "./inspections/no-whitespace.js";
import RuleTrailingSlash from "./inspections/trailing-slash.js";
import RuleRedirects from "./redirects.js";
export const AllInspections = [
  RuleNoMissingHref(),
  RuleNoDuplicateQueryParams(),
  RuleNoNonAsciiChars(),
  RuleMissingHash(),
  RuleNoUnderscores(),
  RuleNoWhitespace(),
  RuleNoDoubleSlashes(),
  RuleNoErrorResponse(),
  RuleNoDocumentRelative(),
  RuleNoJavascript(),
  RuleTrailingSlash(),
  RuleNoUppercaseChars(),
  RuleAbsoluteSiteUrls(),
  RuleRedirects(),
  RuleDescriptiveLinkText()
];
export function inspect(ctx, rules) {
  rules = rules || AllInspections;
  const res = { error: [], warning: [], fix: ctx.link, link: ctx.link };
  let link = ctx.link;
  const siteConfigHost = ctx.siteConfig?.url && parseURL(ctx.siteConfig.url).host;
  const url = parseURL(link);
  const validInspections = rules.filter(({ id }) => !(ctx.skipInspections || []).includes(id));
  let processing = true;
  for (const rule of validInspections) {
    const isFakeAbsolute = link.startsWith("//") && !link.includes(".");
    const hasNonHttpProtocol = hasProtocol(link) && !link.startsWith("http");
    const isExternalLink = hasNonHttpProtocol || url.host && url.host !== siteConfigHost && !isFakeAbsolute;
    if (!rule.externalLinks && isExternalLink) {
      continue;
    }
    rule.test({
      ...ctx,
      link,
      url,
      report(obj, stop) {
        if (stop) {
          processing = false;
        }
        res[obj.scope].push(obj);
        if (obj.fix)
          link = obj.fix;
      }
    });
    if (!processing)
      break;
  }
  res.passes = !res.error?.length && !res.warning?.length;
  res.fix = link;
  res.textContent = ctx.textContent;
  return res;
}
