import { getHeaders } from "h3";
import { useRequestEvent, useState } from "nuxt/app";
import { computed } from "vue";
import { getBotDetection as getBotDetectionFromHeaders } from "../../../util";
import { runFingerprinting } from "../utils/fingerprinting.js";
export function useBotDetection(options = {}) {
  const botContext = useState("robots:bot-context", () => {
    if (import.meta.server) {
      const event = useRequestEvent();
      if (event) {
        const headers = getHeaders(event) || {};
        return getBotDetectionFromHeaders(headers);
      }
    }
    return null;
  });
  if (options.fingerprint && import.meta.client) {
    if (!botContext.value?.isBot) {
      runFingerprinting().then(([result, error]) => {
        if (error) {
          options?.onFingerprintError?.(error);
        } else {
          if (result) {
            botContext.value = result;
          } else {
            botContext.value = {
              isBot: false,
              trusted: false
            };
          }
          options?.onFingerprintResult?.(botContext.value);
        }
      });
    }
  }
  return {
    // Whether we've detected a bot
    isBot: computed(() => botContext.value?.isBot ?? false),
    // Bot name
    botName: computed(() => botContext.value?.botName),
    // Bot category
    botCategory: computed(() => botContext.value?.botCategory),
    // Whether the bot is trusted
    trusted: computed(() => botContext.value?.trusted),
    // Clear detection state
    reset: () => {
      botContext.value = null;
    }
  };
}
